What went well?
The main component of the project, procedural generation, was completed.  Additionally, I was able to add a lighting model which implements ambient occlusion, bump mapping, normal vectors, and texture planar projection.  I created a rock texture in Photoshop with some pre-baked lighting to improve the quality of the rock.  Additionally, I was able to make a bump map in Photoshop that corresponds to the lines on the rocks caused by the pre-baked lighting.  I was able to make the world generate voxels at the edge of the user's render distance when the user reaches the edge of the middle voxel of the terrain.  Lastly, I implemented camera terrain tracking where the look at position is at the same Y coordinate of the terrain.  The user is able to rotate around this point to inspect the terrain as well as walk along the world.

What did not go as intended?
I was unable to finish implementing procedurally generated marble.  Before the digital demo day, I had the outline of the marble finished in MarbleH.hlsl, however, I did not have enough time to write the code to correctly color it.  My main struggle with this project was getting the several phases of procedural generation setup in D3D12.  The new Direct3D gives the user more control over the pipeline and render stages by making the learning curve higher and increasing the steps to implement features.  Unfortunately, since D3D12 is new, the documentation of this library is limited and difficult to understand.  Hence, it took me several weeks to setup each render stage to stream verticies, accept 3D textures, and render to a stencil buffer.

What you would do if you redid this project?
If I were to redo the project, I would have chosen to implement the project in D3D10 because I am most familiar with this version of Direct3D.  Most of the difficulties in the project stemmed from the difficult to understand documentation of D3D12, causing me to make compromises on which features I would implement.  If I had not used part of my time learning D3D12, I believe I could have added tessellation and simple ball physics to allow the user to interact with the terrain by firing a rigid body.

Take Away:
Procedural generation moves the job of an artist to the programmer.  If a world is constructed entirely on the GPU, the programmer has full control over what will eventually be generated.  While this gives the advantage of minimal save state and a wide range of explorable areas, the fine details created by an artist will not be present in strictly procedurally generated games.